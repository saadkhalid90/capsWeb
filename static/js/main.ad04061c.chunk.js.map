{"version":3,"sources":["logo.svg","networkLocs.csv","projections.js","networkMap.js","useAsianGeoData.js","useData.js","App.js","reportWebVitals.js","index.js"],"names":["projection","d3","center","scale","geoPath","lineGenerator","curve","NetworkMap","svgWidth","svgHeight","mapStyles","landkey","topoData","useState","geoData","setGeoData","useEffect","json","then","topology","topojson","feature","objectName","objects","getFeatures","useAsianGeoData","networkLocs","data","setData","preProc","row","projcoords","Lon","Lat","cProjcoords","cLon","cLat","sProjcoords","sLon","sLat","x","y","cx","cy","sx","sy","useData","trigger","setTrigger","each","d","i","pathLength","this","node","getTotalLength","totLen","attr","transition","duration","interrupt","Economy","className","type","onClick","e","width","height","features","map","style","loc","r","fill","dy","fillOpacity","textAnchor","fontSize","strokeWidth","stroke","strokeOpacity","strokeLinecap","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAAe,I,4BCAA,UAA0B,wCCKnCA,EAAaC,MACEC,OAAO,CAAC,GAAI,KACZC,MAAM,KAGrBC,EAAUH,IAAWD,G,WCLrBK,EAAgBJ,MACGK,MAAML,KAEhB,SAASM,EAAT,GAMb,IALAC,EAKD,EALCA,SACAC,EAID,EAJCA,UACAC,EAGD,EAHCA,UACAC,EAED,EAFCA,QACAP,EACD,EADCA,QAEMQ,ECPD,WACL,MAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAaA,OAXAC,qBAAU,WACRC,YAPgB,kJAQbC,MAAK,SAAAC,GAAQ,OAAIJ,EAYxB,SAAqBK,EAAUC,EAASC,GACtC,OAAOD,EAAQD,EAAUA,EAASG,QAAQD,IAZpCE,CACEL,EACAE,IACA,qBAGL,IAEIP,EDPUW,GACXC,EEVD,WACL,MAAwBb,mBAAS,MAAjC,mBAAOc,EAAP,KAAaC,EAAb,KAOA,SAASC,EAAQC,GACf,IAAMC,EAAa/B,EAAW,EAAE8B,EAAIE,KAAMF,EAAIG,MACxCC,EAAclC,EAAW,EAAE8B,EAAIK,MAAOL,EAAIM,OAC1CC,EAAcrC,EAAW,EAAE8B,EAAIQ,MAAOR,EAAIS,OAOhD,OANAT,EAAIU,EAAIT,EAAW,GACnBD,EAAIW,EAAIV,EAAW,GACnBD,EAAIY,GAAKR,EAAY,GACrBJ,EAAIa,GAAKT,EAAY,GACrBJ,EAAIc,GAAKP,EAAY,GACrBP,EAAIe,GAAKR,EAAY,GACdP,EAGT,OAlBAd,qBAAU,WACRf,IAAOyB,EAAaG,GACjBX,KAAKU,KACP,IAeID,EFXamB,GACpB,EAA8BjC,oBAAS,GAAvC,mBAAOkC,EAAP,KAAgBC,EAAhB,KA+CA,OA7CAhC,qBAAU,WACJU,IACFzB,IAAa,kBACV0B,KAAKD,GACLuB,MAAK,SAASC,EAAGC,GAChB,IAAMC,EAAanD,IAAUoD,MAAMC,OAAOC,iBAC1CL,EAAEM,OAASJ,KAGfnD,IAAa,QACV0B,KAAKD,GAERzB,IAAa,kBACXwD,KAAK,oBAAoB,SAAAP,GAAC,OAAIA,EAAEM,OAAS,IAAMN,EAAEM,UACjDC,KAAK,qBAAqB,SAAAP,GAAC,OAAIA,EAAEM,aAEpC,CAAC9B,IAEJV,qBAAU,WACJ+B,GACF9C,IAAa,kBACVyD,aACAC,SAAS,MACTF,KAAK,oBAAqB,GAE7BxD,IAAa,QACVyD,aACAC,SAAS,MACTF,KAAK,eAAgB,KAIxBxD,IAAa,kBACV2D,YACAH,KAAK,oBAAoB,SAAAP,GAAC,OAAIA,EAAEM,OAAS,IAAMN,EAAEM,UACjDC,KAAK,qBAAqB,SAAAP,GAAC,OAAIA,EAAEM,UAEnCvD,IAAa,QACV2D,YACAH,KAAK,gBAAgB,SAAAP,GAAC,MAAkB,aAAbA,EAAEW,QAA0B,EAAI,QAEhE,CAACd,KAICnC,GAAYc,EAEb,qBAAKoC,UAAU,aAAf,SACE,kDAMF,sBAAKA,UAAU,aAAf,UACI,qBAAKA,UAAU,YAAf,SACE,wBAAQC,KAAK,SAASC,QAAS,SAAAC,GAAC,OAAIjB,GAAYD,IAAhD,SAA2DA,EAAU,eAAiB,oBAExF,sBAAKmB,MAAO1D,EAAU2D,OAAQ1D,EAA9B,UACE,mBAAGqD,UAAU,SAAb,SAEIlD,EAASwD,SAASC,KAAI,SAAAhD,GAAO,OAC3B,sBAAMiD,MAAO5D,EAAyBwC,EAAG9C,EAAQiB,IAApBV,QAInC,mBAAGmD,UAAU,aAAb,SAEIpC,EAAY2C,KAAI,SAAAE,GAAG,OACjB,oBAAGT,UAAU,SAAb,UACE,wBAAQpB,GAAK6B,EAAI/B,EAAGG,GAAI4B,EAAI9B,EAAG+B,EAAkB,aAAfD,EAAIV,QAAyB,GAAK,GAAIY,KAAM,YAC9E,sBACEjC,EAAG+B,EAAI/B,EACPC,EAAG8B,EAAI9B,EACPiC,GAAmB,aAAfH,EAAIV,QAAyB,GAAK,GACtCY,KAAM,UACNE,YAA4B,aAAfJ,EAAIV,QAAyB,EAAI,EAC9Ce,WAAW,SACXC,SAAyB,aAAfN,EAAIV,QAAyB,OAAS,OAPlD,SASGU,EAAIV,UAEP,sBAAMC,UAAU,YAAYZ,EAAG7C,EAAc,CAAC,CAACkE,EAAI3B,GAAI2B,EAAI1B,IAAK,CAAC0B,EAAI7B,GAAI6B,EAAI5B,IAAK,CAAC4B,EAAI/B,EAAG+B,EAAI9B,KAAMqC,YAAa,MAAOC,OAAQ,UAAWN,KAAK,OAAOO,cAAe,IAAMC,cAAc,YAbjKV,EAAIV,oBGnFjD,IAAMnD,EAAY,CAChB+D,KAAM,YACNE,YAAa,IACbI,OAAQ,WACRD,YAAa,MACbE,cAAe,OAiBFE,MAdf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAACvD,EAAD,CACEC,SAAU,KACVC,UAAW,IACXC,UAAWA,EACXC,QAAS,cACTP,QAASA,OCTF+E,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnE,MAAK,YAAkD,IAA/CoE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ad04061c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/networkLocs.66da00cd.csv\";","// list all the projections and path functions for East and West Pakistan\n\nimport * as d3 from 'd3';\n\n// projections\nconst projection = d3.geoMercator()\n                    .center([90, 37])\n                    .scale(150 * 3.5);\n\n// geoPath functions computed from projections\nconst geoPath = d3.geoPath(projection);\n\nexport {\n  projection,\n  geoPath\n}\n","import {useState, useRef, useEffect} from 'react';\nimport * as d3 from 'd3';\nimport {useAsianGeoData} from './useAsianGeoData.js';\nimport {useData} from './useData.js';\n\nconst lineGenerator = d3.line()\n                        .curve(d3.curveCardinal);\n\nexport default function NetworkMap({\n  svgWidth,\n  svgHeight,\n  mapStyles,\n  landkey,\n  geoPath}\n){\n  const topoData = useAsianGeoData();\n  const networkLocs = useData();\n  const [trigger, setTrigger] = useState(false);\n\n  useEffect(() => {\n    if (networkLocs){\n      d3.selectAll('path.connLines')\n        .data(networkLocs)\n        .each(function(d, i){\n          const pathLength = d3.select(this).node().getTotalLength();\n          d.totLen = pathLength;\n        })\n\n      d3.selectAll('text')\n        .data(networkLocs)\n\n      d3.selectAll('path.connLines')\n       .attr(\"stroke-dasharray\", d => d.totLen + \" \" + d.totLen)\n       .attr(\"stroke-dashoffset\", d => d.totLen);\n    }\n  }, [networkLocs])\n\n  useEffect(() => {\n    if (trigger){\n      d3.selectAll('path.connLines')\n        .transition()\n        .duration(2500)\n        .attr(\"stroke-dashoffset\", 0);\n\n      d3.selectAll('text')\n        .transition()\n        .duration(2500)\n        .attr(\"fill-opacity\", 1);\n    }\n    else {\n\n      d3.selectAll('path.connLines')\n        .interrupt()\n        .attr(\"stroke-dasharray\", d => d.totLen + \" \" + d.totLen)\n        .attr(\"stroke-dashoffset\", d => d.totLen);\n\n       d3.selectAll('text')\n         .interrupt()\n         .attr(\"fill-opacity\", d => (d.Economy == \"Hong Kong\") ? 1 : 0);\n    }\n  }, [trigger])\n\n\n\n  if (!topoData | !networkLocs) {\n    return (\n      <div className=\"vizContain\">\n        <pre>Loading . . .</pre>\n      </div>\n    )\n  }\n  else {\n    return (\n      <div className=\"vizContain\">\n          <div className=\"buttonDiv\">\n            <button type=\"button\" onClick={e => setTrigger(!trigger)}>{trigger ? \"Stop Trigger\" : \"Start Trigger\"}</button>\n          </div>\n          <svg width={svgWidth} height={svgHeight}>\n            <g className=\"mapGrp\">\n              {\n                topoData.features.map(feature => (\n                  <path style={mapStyles} key={landkey} d={geoPath(feature)}></path>\n                ))\n              }\n            </g>\n            <g className=\"networkGrp\">\n              {\n                networkLocs.map(loc => (\n                  <g className=\"locGrp\" key={loc.Economy}>\n                    <circle cx ={loc.x} cy={loc.y} r={loc.Economy == \"Hong Kong\" ? 25 : 10} fill={\"#172F58\"}/>\n                    <text\n                      x={loc.x}\n                      y={loc.y}\n                      dy={loc.Economy == \"Hong Kong\" ? 37 : 20}\n                      fill={\"#172F58\"}\n                      fillOpacity={loc.Economy == \"Hong Kong\" ? 1 : 0}\n                      textAnchor=\"middle\"\n                      fontSize={loc.Economy == \"Hong Kong\" ? '14px' : '11px'}\n                    >\n                      {loc.Economy}\n                    </text>\n                    <path className=\"connLines\" d={lineGenerator([[loc.sx, loc.sy], [loc.cx, loc.cy], [loc.x, loc.y]])} strokeWidth={\"3px\"} stroke={\"#172F58\"} fill=\"none\" strokeOpacity={0.05} strokeLinecap=\"round\"/>\n                  </g>\n                ))\n              }\n            </g>\n          </svg>\n      </div>\n    )\n  }\n}\n","import * as d3 from 'd3';\nimport {json, csv} from 'd3';\nimport {feature} from 'topojson';\nimport {useState, useEffect} from 'react';\n\nconst capsAsiaUrl = 'https://gist.githubusercontent.com/saadkhalid90/c4dfdd91da09351bbfe6822d94952f8d/raw/68c0e21dd9dc399b4161b9e16839efb4a890d6de/CapsAsiaDis.json';\n// a custom state that makes use of useState and useEffect and returns the value of the state\n\nexport function useAsianGeoData(){\n  const [geoData, setGeoData] = useState(null);\n\n  useEffect(() => {\n    json(capsAsiaUrl)\n      .then(topology => setGeoData(\n        getFeatures(\n          topology,\n          feature,\n          \"CapsAsiaDis\"\n        )\n      ))\n  }, []);\n\n  return geoData;\n}\n\nfunction getFeatures(topojson, feature, objectName){\n  return feature(topojson, topojson.objects[objectName]);\n}\n","import * as d3 from 'd3';\nimport {useState, useEffect} from 'react';\nimport networkLocs from './networkLocs.csv';\nimport {projection} from './projections.js'\n\n// a custom state that makes use of useState and useEffect and returns the value of the state\nexport function useData(){\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    d3.csv(networkLocs, preProc)\n      .then(setData)\n  }, []);\n\n  function preProc(row){\n    const projcoords = projection([+row.Lon, +row.Lat]);\n    const cProjcoords = projection([+row.cLon, +row.cLat]);\n    const sProjcoords = projection([+row.sLon, +row.sLat]);\n    row.x = projcoords[0];\n    row.y = projcoords[1];\n    row.cx = cProjcoords[0];\n    row.cy = cProjcoords[1];\n    row.sx = sProjcoords[0];\n    row.sy = sProjcoords[1];\n    return row;\n  }\n\n  return data;\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport NetworkMap from './networkMap.js';\nimport {projection, geoPath} from './projections.js'\n\nconst mapStyles = {\n  fill: 'lightgrey',\n  fillOpacity: '1',\n  stroke: 'darkgrey',\n  strokeWidth: '1px',\n  strokeOpacity: '0.0'\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NetworkMap\n        svgWidth={1200}\n        svgHeight={800}\n        mapStyles={mapStyles}\n        landkey={\"capsAsiaMap\"}\n        geoPath={geoPath}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}